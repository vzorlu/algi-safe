# Generated by Django 5.1.2 on 2025-03-03 22:37

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('council', '0003_profile'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=100, unique=True)),
                ('Turkish', models.CharField(max_length=100)),
                ('Speech', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Class Data',
                'verbose_name_plural': 'Class Data',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Detection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=100)),
                ('x_min', models.FloatField(default=0.0)),
                ('y_min', models.FloatField(default=0.0)),
                ('x_max', models.FloatField(default=0.0)),
                ('y_max', models.FloatField(default=0.0)),
                ('confidence', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('EMAIL', 'E-posta'), ('SMS', 'SMS'), ('PUSH', 'Push Bildirim'), ('TELEGRAM', 'Telegram'), ('WHATSAPP', 'WhatsApp')], max_length=100)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='OfflineMode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_file', models.FileField(upload_to='offline_videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'avi', 'mov'])], verbose_name='Video Dosyası')),
                ('coordinates_json', models.FileField(upload_to='offline_coordinates/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['json'])], verbose_name='Koordinat JSON Dosyası')),
                ('device_name', models.CharField(max_length=255, verbose_name='Cihaz Adı')),
                ('area', models.CharField(blank=True, max_length=255, null=True, verbose_name='Bölge')),
                ('processed', models.BooleanField(default=False, verbose_name='İşlem Durumu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
            ],
            options={
                'verbose_name': 'Çevrimdışı Video',
                'verbose_name_plural': 'Çevrimdışı Videolar',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StreamImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='stream_images/')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('processed', models.BooleanField(default=False)),
                ('lang', models.FloatField(blank=True, null=True)),
                ('long', models.FloatField(blank=True, null=True)),
                ('fulladdress', models.TextField(blank=True, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('deviceuuid', models.CharField(blank=True, max_length=255, null=True)),
                ('speech', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VideoUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'avi', 'mov'])])),
                ('json_file', models.FileField(upload_to='json_files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['json'])])),
                ('device_id', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=100)),
                ('rule_name', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('severity', models.CharField(choices=[('LOW', 'Düşük'), ('MEDIUM', 'Orta'), ('HIGH', 'Yüksek')], default='MEDIUM', max_length=10)),
                ('frequency', models.CharField(choices=[('immediate', 'Anında'), ('daily', 'Günlük'), ('weekly', 'Haftalık'), ('monthly', 'Aylık')], default='immediate', max_length=10)),
                ('send_time', models.TimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('create_task', models.BooleanField(default=False)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='council.department')),
                ('detection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='stream.detection')),
                ('notification_type', models.ManyToManyField(to='stream.notificationtype')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='detection',
            name='notification',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='detections', to='stream.notification'),
        ),
        migrations.AddField(
            model_name='detection',
            name='image',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detections', to='stream.streamimage'),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('task_type', models.CharField(choices=[('INSPECTION', 'Saha Denetimi'), ('INVESTIGATION', 'İnceleme'), ('ENFORCEMENT', 'Yaptırım')], max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Düşük'), ('MEDIUM', 'Orta'), ('HIGH', 'Yüksek')], default='MEDIUM', max_length=10)),
                ('status', models.CharField(choices=[('PENDING', 'Beklemede'), ('IN_PROGRESS', 'Devam Ediyor'), ('COMPLETED', 'Tamamlandı'), ('CANCELLED', 'İptal Edildi')], default='PENDING', max_length=20)),
                ('due_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_tasks', to='council.department')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='tasks',
            field=models.ManyToManyField(blank=True, related_name='notifications', to='stream.task'),
        ),
        migrations.CreateModel(
            name='OfflineVideoLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('address', models.TextField(blank=True, null=True)),
                ('speed', models.FloatField(blank=True, null=True)),
                ('heading', models.FloatField(blank=True, null=True)),
                ('offline_video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='stream.offlinemode')),
            ],
            options={
                'verbose_name': 'Video Konum Verisi',
                'verbose_name_plural': 'Video Konum Verileri',
                'ordering': ['timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='stream_offl_timesta_36c55c_idx'), models.Index(fields=['offline_video', 'timestamp'], name='stream_offl_offline_96c7de_idx')],
            },
        ),
    ]
